{"version":3,"sources":["Components/ActiveUser.jsx","Components/ListOfActiveUsers.jsx","Components/QueueUser.jsx","Components/ListOfQueueUsers.jsx","App.js","serviceWorker.js","index.js"],"names":["ActiveUser","props","user","socket","WebSocket","ListOfActiveUsers","state","expireUser","allUser","userMessage","this","setState","users","usertextMessage","length","className","map","index","Button","onClick","i","splice","onmessage","event","activeUsersData","JSON","parse","data","activeUsers","push","shift","handleExpire","React","Component","QueueUser","ListOfQueueUsers","App","joinQueue","bind","leaveQueue","videoURL","queueUsers","showEnter","showTimesUp","isInQueue","name","roomName","getTimeSet","brodCastText","userMessageQueue","onopen","console","log","allUsers","timeStamp","url","videoUrl","onerror","err","error","message","close","MainData","send","stringify","dataAll","Modal","Dialog","Body","Footer","variant","href","target","Accordion","Card","Toggle","id","as","eventKey","Collapse","toString","Form","Label","FormControl","placeholder","aria-label","onChange","e","value","preventDefault","style","marginBottom","marginTop","width","defaultValue","sendBroadcast","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c1b1808d.chunk.js","sourcesContent":["import React from 'react';\n\n// function call Listed ActiveUser in Front-End  \nconst ActiveUser = (props) => {\n    return (\n        <p>{props.user}</p>\n    )\n}\n\nexport default ActiveUser;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ActiveUser from './ActiveUser.jsx';\nconst socket = new WebSocket('wss://socket-link.dreamstate-4-all.org');\n\nclass ListOfActiveUsers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expireUser: null,\n            allUser: null,\n            userMessage: null\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ allUser: this.props.users, userMessage: this.props.usertextMessage })\n    }\n    // ListOfActiveUsers render when Listing in Active user(get used with props)\n    render() {\n        const handleExpire = (index, user) => {\n            // console.log(\"click on expire button\", index);\n            // console.log(\"user length =>\", this.props.users.length);\n            for (var i in this.state.allUser) {\n                if (this.state.allUser[i] == user) {\n                    this.state.allUser.splice(i, 1);\n                    socket.onmessage = event => {\n                        let activeUsersData = JSON.parse(event.data);\n                        let ActiveSet = activeUsersData.activeUsers.splice(i, 1);\n                        // console.log(\"activeUsersData =>\", activeUsersData);\n                        // let MainData = { \"name\": activeUsersData && activeUsersData.activeUsers, \"userMessage\": \"\", \"roomName\": activeUsersData && activeUsersData.roomName };\n                        // socket.send(JSON.stringify(MainData));\n                        // console.log(\"activeUsersData && activeUsersData.activeUsers.length\", activeUsersData && activeUsersData.activeUsers.length);\n                        if (activeUsersData && activeUsersData.activeUsers.length < 3) {\n                            let ChangeAllSet = activeUsersData.activeUsers.push(activeUsersData.users[0]);\n                            activeUsersData.users.shift();\n                        }\n                        // socket.send(activeUsersData);\n                    }\n                    break;\n                    // this.props.ExpireDataHere(this.state.allUser);\n                }\n            }\n        }\n        if (this.props.users.length) {\n            return (\n                <div className='listOfActiveUsers'>\n                    <h5><b>Currently Exploring</b></h5>\n                    {this.state.allUser && this.state.allUser.map((user, index) => {\n                        return (<div className=\"expire-section\"><ActiveUser user={user} /><Button onClick={() => handleExpire(index, user)}>Expire</Button></div>)\n                    })}\n                </div>\n            )\n        } else return null;\n    }\n}\n\nexport default ListOfActiveUsers;","import React from 'react';\n\n// function call Listed QueueUser in Front-End  \nconst QueueUser = (props) => {\n    return (\n        <p>{props.user}</p>\n    )\n}\n\nexport default QueueUser;","import React from 'react';\nimport QueueUser from './QueueUser.jsx';\n\nclass ListOfQueueUsers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userMessage: null\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ userMessage: this.props.usertextMessage })\n    }\n\n    // ListOfQueueUsers render when Listing in Queue User(get used with props)\n    render() {\n        if (this.props.users.length) {\n            return (\n                <div className='listOfQueueUsers'>\n                    <h5><b>Waiting in the Queue</b></h5>\n                    {this.props.users.map(user => {\n                        return (<div><QueueUser user={user} /></div>)\n                    })}\n                </div>\n            )\n        } else return null;\n    }\n}\n\nexport default ListOfQueueUsers;","/* global localStorage, */\nimport React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FormControl, Form } from \"react-bootstrap\";\nimport ListOfActiveUsers from './Components/ListOfActiveUsers.jsx';\nimport ListOfQueueUsers from './Components/ListOfQueueUsers.jsx'\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\n// instance of websocket connection as a class property\nconst socket = new WebSocket('wss://socket-link.dreamstate-4-all.org');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.joinQueue = this.joinQueue.bind(this);\n    this.leaveQueue = this.leaveQueue.bind(this);\n    this.state = {\n      user: null,\n      videoURL: null,\n      users: null,\n      activeUsers: null,\n      queueUsers: null,\n      showEnter: false,\n      showTimesUp: false,\n      isInQueue: false,\n      name: null,\n      roomName: null,\n      userMessage: null,\n      getTimeSet: null,\n      brodCastText: null,\n      userMessageQueue: \"\"\n    }\n  }\n\n  // componentDidMount function call every time render class Component\n  componentDidMount() {\n    socket.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connection open');\n    }\n\n    // listen to data sent from the websocket(ws) server\n    socket.onmessage = event => {\n      // console.log(\"event =>\", event);\n      //if the message from the server starts with u then it has the user lists in it\n      if (event.data[3] === 'u') {\n        const allUsers = event.data && JSON.parse(event.data)\n        if (allUsers.activeUsers && allUsers.activeUsers.length == 3) {\n          this.setState({\n            users: allUsers,\n            activeUsers: allUsers.activeUsers,\n            queueUsers: allUsers.users,\n            getTimeSet: allUsers.timeStamp\n          })\n        } else {\n          this.setState({\n            users: allUsers,\n            activeUsers: allUsers.activeUsers,\n            queueUsers: allUsers.users,\n            getTimeSet: allUsers.timeStamp\n          })\n        }\n        //if it starts with v then it is the URL for the video endpoint\n      } else if (event.data[2] === 'v') {\n        const url = JSON.parse(event.data)\n        this.setState({\n          showEnter: true,\n          videoURL: url.videoUrl\n        })\n        //if it starts with T then it is telling the user that time is up\n      } else if (event.data[2] === 'T') {\n        this.setState({\n          showTimesUp: true\n        })\n      }\n    }\n\n    socket.onerror = err => {\n      console.error(\n        \"Socket encountered error: \",\n        err.message,\n        \"Closing socket\"\n      );\n      socket.close();\n    };\n  };\n\n  //when the user decides to join the 3d verse (puts you in the world if it is not full and the queue if it is full)\n  joinQueue(data) {\n    if (data && data.activeUsers && data.users) {\n      this.setState({\n        name: data,\n      })\n    } else {\n      if (this.state.name.length > 0) {\n        let MainData = { \"name\": this.state.name, \"userMessage\": this.state.userMessage, \"roomName\": this.state.roomName };\n        socket.send(JSON.stringify(MainData));\n        this.setState({\n          isInQueue: true,\n          user: 'playaName',\n          userMessageQueue: this.state.userMessage\n        })\n      }\n    }\n  }\n\n  //when a user decides to leave the queue\n  leaveQueue() {\n\n  }\n\n  //user click on expire button then remove each user from the current user\n  ExpireData(data) {\n    data && data.activeUsers.map((dataAll) => {\n      socket.send(dataAll);\n    });\n  }\n\n  sendBroadcast() {\n    console.log(\"click to send broadcast message\");\n    // it emits the new message written by the user to the 'chat' channel\n    // socket.emit('sendMessage', \"come on main data set here\");\n  }\n\n  render() {\n    const NameText = event => {\n      this.setState({ name: event.target.value });\n      event.preventDefault();\n    };\n\n    const RoomName = event => {\n      this.setState({ roomName: event.target.value });\n      event.preventDefault();\n    };\n\n    const MessageText = event => {\n      this.setState({ userMessage: event.target.value });\n      event.preventDefault();\n    }\n\n    const BroadCastText = event => {\n      this.setState({ brodCastText: event.target.value });\n      event.preventDefault();\n    };\n\n    if (!this.state.showEnter && !this.state.showTimesUp && this.state.activeUsers != null && this.state.queueUsers != null) {\n      return (\n        <Accordion>\n          <Card>\n            <Accordion.Toggle id=\"queueToggle\" as={Button} variant='primary' eventKey=\"1\">\n              Enter The 3D Verse\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <div>\n                  <Form.Label>Room Name</Form.Label>\n                  <FormControl\n                    placeholder=\"RoomName\"\n                    aria-label=\"RoomName\"\n                    onChange={(e) => RoomName(e)}\n                    style={{ marginBottom: \"10px\", marginTop: \"10px\", width: \"8%\" }}\n                    defaultValue={this.state.roomName}\n                  />\n                  <Form.Label>Name</Form.Label>\n                  <FormControl\n                    placeholder=\"Name\"\n                    aria-label=\"Name\"\n                    onChange={(e) => NameText(e)}\n                    style={{ marginBottom: \"10px\", marginTop: \"10px\", width: \"8%\" }}\n                  />\n                  <Form.Label>Message</Form.Label>\n                  <FormControl\n                    placeholder=\"Message\"\n                    aria-label=\"Send Message\"\n                    onChange={(e) => MessageText(e)}\n                    style={{ marginBottom: \"10px\", marginTop: \"10px\", width: \"8%\" }}\n                  />\n                </div>\n                <div id='userLists'>\n                  <ListOfActiveUsers users={this.state.activeUsers} usertextMessage={this.state.userMessage} />\n                  <ListOfQueueUsers users={this.state.queueUsers} getTimeSet={this.state.getTimeSet} />\n                </div>\n                <div>\n                  <p><b>Number of people waiting join: {this.state.queueUsers.length.toString()}</b></p>\n                  <Button onClick={this.joinQueue}>Join</Button>\n                  <h3 >Broadcast</h3>\n                  <FormControl\n                    placeholder=\"Broadcast\"\n                    aria-label=\"Broadcast\"\n                    onChange={(e) => BroadCastText(e)}\n                    style={{ marginBottom: \"10px\", marginTop: \"10px\", width: \"8%\" }}\n                  />\n                  <Button id=\"sendMessage\" onClick={this.sendBroadcast}>Send</Button>\n                </div>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      );\n    } else if (this.state.showEnter) {\n      return (\n        <Modal.Dialog>\n          <Modal.Body>\n            You may now enter the 3D verse!\n              </Modal.Body>\n          <Modal.Footer>\n            {/* <Button variant='primary' href={this.state.videoURL} target=\"_blank\">Enter</Button> */}\n            <Button variant='primary' href={this.state.videoURL} onClick={() => { this.setState({ showEnter: false }) }} target=\"_blank\">Enter</Button>\n            <Button variant='primary' onClick={() => { this.setState({ showEnter: false }) }}>Close</Button>\n          </Modal.Footer>\n        </Modal.Dialog>\n      )\n    } else if (this.state.showTimesUp) {\n      return (\n        <Modal.Dialog>\n          <Modal.Body> Times Up!</Modal.Body>\n          <Modal.Footer>\n            <Button variant='primary' onClick={() => { this.setState({ showTimesUp: false }) }}>Close</Button>\n          </Modal.Footer>\n        </Modal.Dialog>\n      )\n    } else if (!this.state.showEnter && !this.state.showTimesUp && this.state.activeUsers != null && this.state.queueUsers != null && this.state.isInQueue) {\n      return (\n        <Accordion>\n          <Card>\n            <Accordion.Toggle id=\"queueToggle\" as={Button} variant='primary' eventKey=\"1\">\n              Enter The 3D Verse\n          </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <div id='userLists'>\n                  <ListOfActiveUsers users={this.state.activeUsers} />\n                  <ListOfQueueUsers users={this.state.queueUsers} />\n                </div>\n                <div>\n                  <p><b>Number of people waiting Leave: {this.state.queueUsers.length.toString()}</b></p>\n                  <Button onClick={this.leaveQueue}>Leave</Button>\n                </div>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      );\n    } else {\n      return (\n        <Accordion>\n          <Card>\n            <Accordion.Toggle id=\"queueToggle\" as={Button} variant='primary' eventKey=\"1\">\n              Enter The 3D Verse\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n                <div id='userLists'>\n                </div>\n                <Button onClick={this.joinQueue}>Join Queue</Button>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}